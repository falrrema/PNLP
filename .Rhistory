tot %>% select(rutdnipasaporte, nombreApellido.x, validadoAcarreo) %>% data.table::fwrite(file = "validadosAcarreo.csv")
View(tot)
names(tot) <- cleanText(names(tot), columnNames = T)
names(c1) <- cleanText(names(c1), columnNames = T)
names(c2) <- cleanText(names(c2), columnNames = T)
c1$validadoAcarreo <- "SI"
c2$validadoAcarreo <- "SI"
c <- rbind(c1,c2)
c$rutdnipasaporte <- sapply(strsplit(c$rutdnipasaporte, split = "\\."), function(t) t[[1]])
c <- c[!duplicated(c$rutdnipasaporte),]
c
View(c)
Sys.setlocale(locale="es_ES.UTF-8") # Para visualizar caracteres especiales
tot <- read_excel("Downloads/Taller_M1_2017.xls")
c1 <- read_excel("Downloads/Clase1TM.xls")
c2 <- read_excel("Downloads/Clase2TM.xls")
names(tot) <- cleanText(names(tot), columnNames = T)
names(c1) <- cleanText(names(c1), columnNames = T)
names(c2) <- cleanText(names(c2), columnNames = T)
c1$validadoAcarreo <- "SI"
c2$validadoAcarreo <- "SI"
c <- rbind(c1,c2)
c$rutdnipasaporte <- sapply(strsplit(c$rutdnipasaporte, split = "\\."), function(t) t[[1]])
c <- c[!duplicated(c$rutdnipasaporte),]
View(c)
View(tot)
tot$rutdnipasaporte <- sapply(strsplit(tot$rutdnipasaporte, split = "\\."), function(t) t[[1]])
View(c2)
View(tot)
tot$rutdnipasaporte <- sapply(strsplit(tot$rutdnipasaporte, split = "\\."), function(t) t[[1]]) %>% tolower
View(tot)
tot <- tot %>% select(nombreApellido, rutdnipasaporte) %>%
merge(c, by = c("rutdnipasaporte"), all.x = T)
tot$nombreApellido.x <- cleanText(tot$nombreApellido.x)
tot$nombreApellido.x <- stringr::str_to_title(tot$nombreApellido.x)
tot[is.na(tot$validadoAcarreo),]$validadoAcarreo <- "NO"
tot %>% select(rutdnipasaporte, nombreApellido.x, validadoAcarreo) %>% data.table::fwrite(file = "validadosAcarreo.csv")
View(tot)
solvente <- seq_along(10)
solvente
solvente <- seq(0.5, 5, by = 0.5)
solvente
refinado <- seq(1, 6, by = 0.5)
refinado <- seq(1, 5.5, by = 0.5)
plot(solvente, refinado)
a <- data.frame(refinado, k1 = refinado*0.01, k2 = refinado*10, k3 = refinado*100)
plot(a)
plot(a$refinado, a$k1)
points(a$refinado, a$k2, col = "red")
plot(a$refinado, a$k3)
points(a$refinado, a$k2, col = "red")
plot(a$refinado, a$k1, ylim = c(0,600))
points(a$refinado, a$k2, col = "red")
points(a$refinado, a$k1, col = "blue")
points(a$refinado, a$k3)
library(tm)
library(data.table)
library(plotly)
library(dplyr)
library(caret)
library(caTools)
setwd("~/Kaggle/PNLP")
library(dplyr)
library(data.table)
library(plotly)
library(tidyr)
source("helper_pnlp.R")
Sys.setlocale(locale="es_ES.UTF-8") # Para visualizar caracteres especiales
df <- singleRead("data/train.csv")
head(df, 10)
glimpse(df)
df$filename <- NULL
df$predModBas <- 0
View(df)
table(df$is_duplicate, df$predModBas)
tablePred <- table(df$is_duplicate, df$predModBas)
caret::confusionMatrix(tablePred)
tablePred <- cbind(table(df$is_duplicate, df$predModBas), data.frame(1 = c(0,0)))
data.frame(1 = c(0,0))
tablePred <- cbind(table(df$is_duplicate, df$predModBas), data.frame("1" = c(0,0)))
tablePred
table(df$is_duplicate, df$predModBas)
data.frame(table(df$is_duplicate, df$predModBas))
as.data.frame(table(df$is_duplicate, df$predModBas))
table(0,0)
as.data.frame(table(df$is_duplicate, df$predModBas))
table(df$is_duplicate, df$predModBas)
table(df$is_duplicate, df$predModBas, exclude = NULL)
tablePred <- table(df$is_duplicate, df$predModBas, exclude = NULL)
caret::confusionMatrix(tablePred)
colnames(tablePred)
colnames(tablePred)[2] <- "1"
tablePred
tablePred[-3]
tablePred[-3,]
tablePred <- tablePred[-3,]
caret::confusionMatrix(tablePred)
install.packages("Metrics")
logLoss(df$is_duplicate, df$predModBas)
Metrics::logLoss(df$is_duplicate, df$predModBas)
df$is_duplicate
df$predModBas
Metrics::logLoss(as.numeric(df$is_duplicate), df$predModBas)
as.numeric(df$is_duplicate)
as.logical(df$is_duplicate)
as.logical(as.numeric(df$is_duplicate))
Metrics::logLoss(as.logical(as.numeric(df$is_duplicate)), as.logical(df$predModBas))
Metrics::logLoss(as.logical(df$predModBas), as.logical(as.numeric(df$is_duplicate)))
Metrics::logLoss(c(1,2,3), c(1,2,3))
Metrics::logLoss(c(1,2,3), c(1,2,10))
Metrics::logLoss(c(1,0,1), c(1,0,1))
Metrics::logLoss(c(1,0,1), c(1,0,0))
Metrics::logLoss(c(1,0.1,1), c(1,0.2,1))
Metrics::logLoss(c(1,0,1), c(0.9,0.01,0.9))
+ }
LogLossBinary = function(actual, predicted, eps = 1e-15) {
predicted = pmin(pmax(predicted, eps), 1-eps)
- (sum(actual * log(predicted) + (1 - actual) * log(1 - predicted))) / length(actual)
}
LogLossBinary(df$is_duplicate, df$predModBas)
LogLossBinary(as.numeric(df$is_duplicate), df$predModBas)
Metrics::logLoss(c(1,0,1), c(0.999999,0.0000001,0.9999999))
setwd("~/Kaggle/PNLP")
library(dplyr)
library(data.table)
library(plotly)
library(tidyr)
source("helper_pnlp.R")
Sys.setlocale(locale="es_ES.UTF-8") # Para visualizar caracteres especiales
# Leyendo datos y limpiando
df <- singleRead("data/train.csv")
head(df, 10)
glimpse(df)
df$filename <- NULL
df[, c("q1Clean", "q2Clean") := list(cleanText(question1, removeExtraWords = tm::stopwords("en")),
cleanText(question2, removeExtraWords = tm::stopwords("en")))]
table_NA(df) # No se observa datos vacÃ­os
summary(df)
# 1. Duplicados?
duplicated(df$id) %>% table
duplicated(df$qid1) %>% table
duplicated(df$qid2) %>% table
df %>% mutate(qpaste = paste(question1, question2)) %>% # pares de preguntas identicas
mutate(isDu = duplicated(qpaste)) %>% slice(which(isDu == T))
df$wordCountQ1 <- stringr::str_count(df$question1, pattern = "\\S+")
df$wordCountQ2 <- stringr::str_count(df$question2, pattern = "\\S+")
df$diffLp <- abs(df$wordCountQ1-df$wordCountQ2)
hist(df$diffLp)
summary(df$diffLp)
hist(df$diffLp)
hist(df$diffLp, breaks = 50)
View(df)
boxplot(is_duplicate ~ diffLp, data = df)
str(df)
as.logical(is_duplicate)
as.logical(df$is_duplicate)
as.logical(as.numeric(df$is_duplicate))
df$is_duplicate <- as.logical(as.numeric(df$is_duplicate))
boxplot(is_duplicate ~ diffLp, data = df)
boxplot(diffLp ~ is_duplicate, data = df)
t.test(diffLp ~ is_duplicate, data = df)
df %>% group_by(is_duplicate) %>% summarise(meanWCdiff = mean(diffLp))
df %>% group_by(is_duplicate) %>% summarise(meanWCdiff = mean(diffLp), sdWCdiff = sd(diffLp))
df %>% group_by(is_duplicate) %>% summarise(meanWCdiff = mean(diffLp), sdWCdiff = sd(diffLp), medianWCdiff = median(diffLp))
df$wordCountCharQ1 <- stringr::str_count(df$question1, pattern = "")
df$wordCountCharQ2 <- stringr::str_count(df$question2, pattern = "")
df$wordCountCharQ1
df$diffLc <- abs(df$wordCountCharQ1-df$wordCountCharQ2)
summary(df$diffLc)
hist(df$diffLc, breaks = 50)
boxplot(diffLc ~ is_duplicate, data = df)
t.test(diffLc ~ is_duplicate, data = df)
df %>% group_by(is_duplicate) %>%
summarise(meanWCdiff = mean(diffLc), sdWCdiff = sd(diffLc), medianWCdiff = median(diffLc))
####################
# EDA PNLP
####################
setwd("~/Kaggle/PNLP")
library(dplyr)
library(data.table)
library(plotly)
library(tidyr)
source("helper_pnlp.R")
Sys.setlocale(locale="es_ES.UTF-8") # Para visualizar caracteres especiales
# Leyendo datos y limpiando
df <- singleRead("data/train.csv")
head(df, 10)
glimpse(df)
df$filename <- NULL
df[, c("q1Clean", "q2Clean") := list(cleanText(question1, removeExtraWords = tm::stopwords("en")),
cleanText(question2, removeExtraWords = tm::stopwords("en")))]
df$is_duplicate <- as.logical(as.numeric(df$is_duplicate))
df$wordCountQ1 <- stringr::str_count(df$question1, pattern = "\\S+")
df$wordCountQ2 <- stringr::str_count(df$question2, pattern = "\\S+")
df$diffLp <- abs(df$wordCountQ1-df$wordCountQ2)
summary(df$diffLp)
hist(df$diffLp, breaks = 50)
boxplot(diffLp ~ is_duplicate, data = df)
t.test(diffLp ~ is_duplicate, data = df)
df %>% group_by(is_duplicate) %>%
summarise(meanWCdiff = mean(diffLp), sdWCdiff = sd(diffLp), medianWCdiff = median(diffLp))
boxplot(diffLp ~ is_duplicate, data = df, ylim = c(0,30))
boxplot(diffLp ~ is_duplicate, data = df, ylim = c(0,10))
t.test(diffLp ~ is_duplicate, data = df)
df %>% group_by(is_duplicate) %>%
summarise(meanWCdiff = mean(diffLp), sdWCdiff = sd(diffLp), medianWCdiff = median(diffLp))
var.test(diffLp ~ is_duplicate, data = df)
x <- rnorm(50, mean = 0, sd = 2)
y <- rnorm(30, mean = 1, sd = 1)
var.test(x, y)
var.test(lm(x ~ 1), lm(y ~ 1))
shapiro.test(df$diffLp)
shapiro.test(sample(df$diffLp, size = 5000)
var.test(diffLp ~ is_duplicate, data = df)
t.test(diffLp ~ is_duplicate, data = df, )
df %>% group_by(is_duplicate) %>%
summarise(meanWCdiff = mean(diffLp), sdWCdiff = sd(diffLp), medianWCdiff = median(diffLp))
# LC
df$wordCountCharQ1 <- stringr::str_count(df$question1, pattern = "")
df$wordCountCharQ2 <- stringr::str_count(df$question2, pattern = "")
df$diffLc <- abs(df$wordCountCharQ1-df$wordCountCharQ2)
summary(df$diffLc)
shapiro.test(sample(df$diffLp, size = 5000))
?shapiro.test
qqnorm(df$diffLp)
y <- rt(200, df = 5)
qqnorm(y); qqline(y, col = 2)
y <- rt(200, df = 5)
qqnorm(y); qqline(y, col = 2)
qqnorm(df$diffLp)
wilcox.test(diffLp ~ is_duplicate, data = df, )
df %>% group_by(is_duplicate) %>%
summarise(meanWCdiff = mean(diffLp), sdWCdiff = sd(diffLp), medianWCdiff = median(diffLp))
hist(log(df$diffLc))
hist(lm(df$diffLc))
lm(df$diffLc)
hist(log(df$diffLc))
qqnorm(log(df$diffLc))
log(df$diffLc)
df %>% mutate(diffLpSegment = cut(diffLp, breaks = c(0,1,2,3,4,5,6,7,8,9,10,20,50,100)))
df %>% mutate(diffLpSegment = cut(diffLp, breaks = c(0,1,2,3,4,5,6,7,8,9,10,20,50,100))) %>%
count(diffLpSegment)
df %>% mutate(diffLpSegment = cut(diffLp, breaks = c(0,1,2,3,4,5,6,7,8,9,10,20,50,100), right = F)) %>%
count(diffLpSegment)
df %>% mutate(diffLpSegment = cut(diffLp, breaks = c(0,1,2,3,4,5,6,7,8,9,10,20,50,100,1000), right = F)) %>%
count(diffLpSegment)
df %>% mutate(diffLpSegment = cut(diffLp, breaks = c(0,1,2,3,4,5,6,7,8,9,10,20,50,100,1000), right = T)) %>%
count(diffLpSegment)
df %>% mutate(diffLpSegment = cut(diffLp, breaks = c(0,1,2,3,4,5,6,7,8,9,10,20,50,100,1000), right = F)) %>%
count(diffLpSegment)
df %>% mutate(diffLpSegment = cut(diffLp, breaks = c(0,1,2,3,4,5,6,7,8,9,10,20,50,100,500), right = F)) %>%
count(diffLpSegment)
df %>% mutate(diffLpSegment = cut(diffLp, breaks = c(0,1,2,3,4,5,6,7,8,9,10,20,50,100,200), right = F)) %>%
count(diffLpSegment)
df %>% mutate(diffLpSegment = cut(diffLp, breaks = c(0,1,2,3,4,5,6,7,8,9,10,20,50,100,300), right = F)) %>%
count(diffLpSegment)
df %>% mutate(diffLpSegment = cut(diffLp, breaks = c(0,1,2,3,4,5,6,7,8,9,10,20,50,100,300), right = F)) %>%
group_by(diffLpSegment) %>% summarise(prob_duplicate = sum(is_duplicate)/n())
sum(df$is_duplicate)
sum(df$is_duplicate)/nrow(df)
df %>% mutate(diffLpSegment = cut(diffLp, breaks = c(0,1,2,3,4,5,6,7,8,9,10,20,50,100,300), right = F)) %>%
group_by(diffLpSegment) %>% summarise(prob_duplicate = sum(is_duplicate)/n()) %>%
plot_ly(~diffLpSegment, ~prob_duplicate, type = "bar")
df %>% mutate(diffLpSegment = cut(diffLp, breaks = c(0,1,2,3,4,5,6,7,8,9,10,20,50,100,300), right = F)) %>%
group_by(diffLpSegment) %>% summarise(prob_duplicate = sum(is_duplicate)/n()) %>%
plot_ly(x = ~diffLpSegment, y = ~prob_duplicate, type = "bar")
df %>% mutate(diffLpSegment = cut(diffLp, breaks = c(0,1,2,3,4,5,6,7,8,9,10,20,50,100,300), right = F)) %>%
filter(diffLpSegment == "[0,1)")
df %>% mutate(diffLpSegment = cut(diffLp, breaks = c(0,1,2,3,4,5,6,7,8,9,10,20,50,100,300), right = F)) %>%
filter(diffLpSegment == "[0,1)") %>% count(diffLp)
df %>% mutate(diffLpSegment = cut(diffLp, breaks = c(0,1,2,3,4,5,6,7,8,9,10,20,50,100,300), right = F)) %>%
filter(diffLpSegment == "[1,2)") %>% count(diffLp)
df %>% mutate(diffLpSegment = cut(diffLp, breaks = c(0,2,4,8,20,50,100,300), right = F)) %>%
group_by(diffLpSegment) %>% summarise(prob_duplicate = sum(is_duplicate)/n()) %>%
plot_ly(x = ~diffLpSegment, y = ~prob_duplicate, type = "bar")
df %>% mutate(diffLpSegment = cut(diffLp, breaks = c(0,1,2,3,4,5,6,7,8,9,10,20,50,100,300), right = F)) %>%
group_by(diffLpSegment) %>% summarise(prob_duplicate = sum(is_duplicate)/n()) %>%
plot_ly(x = ~diffLpSegment, y = ~prob_duplicate, type = "bar")
df %>% mutate(diffLpSegment = cut(diffLp, breaks = c(0,1,2,3,4,5,6,7,8,9,10,20,50,100,300), right = F)) %>%
filter(diffLpSegment == "[1,2)") %>% count(diffLp)
boxplot(diffLc ~ is_duplicate, data = df, ylim = c(0,10))
boxplot(diffLc ~ is_duplicate, data = df)
shapiro.test(sample(df$diffLc, size = 5000))
qqnorm(df$diffLp)
var.test(diffLc ~ is_duplicate, data = df)
wilcox.test(diffLc ~ is_duplicate, data = df, )
df %>% group_by(is_duplicate) %>%
summarise(meanWCdiff = mean(diffLc), sdWCdiff = sd(diffLc), medianWCdiff = median(diffLc))
df %>% mutate(diffLcSegment = cut(diffLc, breaks = c(0,1,2,3,4,5,6,7,8,9,10,20,50,100,300), right = F)) %>%
group_by(diffLcSegment) %>% summarise(prob_duplicate = sum(is_duplicate)/n()) %>%
plot_ly(x = ~diffLcSegment, y = ~prob_duplicate, type = "bar")
qqnorm(df$diffLc)
df %>% mutate(diffLcSegment = cut(diffLc, breaks = c(0,2,4,6,8,10,20,50,100,300,1000), right = F)) %>%
group_by(diffLcSegment) %>% summarise(prob_duplicate = sum(is_duplicate)/n()) %>%
plot_ly(x = ~diffLcSegment, y = ~prob_duplicate, type = "bar")
df %>% mutate(diffLcSegment = cut(diffLc, breaks = c(0,2,4,6,8,10,20,50,100,300,1000), right = F)) %>% count(diffLcSegment)
df %>% mutate(diffLcSegment = cut(diffLc, breaks = c(0,2,4,6,8,10,20,50,100,300,1000, 5000), right = F)) %>% count(diffLcSegment)
df %>% mutate(diffLcSegment = cut(diffLc, breaks = c(0,2,4,6,8,10,20,50,100,300,1000,5000), right = F)) %>%
group_by(diffLcSegment) %>% summarise(prob_duplicate = sum(is_duplicate)/n()) %>%
plot_ly(x = ~diffLcSegment, y = ~prob_duplicate, type = "bar")
df %>% mutate(diffLpSegment = cut(diffLp, breaks = c(0,1,2,3,4,5,6,7,8,9,10,20,50,100,300), right = F)) %>%
filter(diffLpSegment == "[1,2)") %>% count(diffLc)
df %>% mutate(diffLcSegment = cut(diffLc, breaks = c(0,1,2,3,4,5,6,7,8,9,10,20,50,100,300), right = F)) %>%
filter(diffLcSegment == "[1,2)") %>% count(diffLc)
View(df)
df$wcQ1clean <- stringr::str_count(df$q1Clean, pattern = "\\S+")
df$wcQ2clean <- stringr::str_count(df$q2Clean, pattern = "\\S+")
df$dlp <- abs(df$wcQ1clean-df$wcQ2clean)
boxplot(dlp ~ is_duplicate, data = df, ylim = c(0,10))
wilcox.test(dlp ~ is_duplicate, data = df)
df$dlpClean <- abs(df$wcQ1clean-df$wcQ2clean)
df %>% mutate(dlpCleanSegment = cut(dlpClean, breaks = c(0,1,2,3,4,5,6,7,8,9,10,20,50,100,300), right = F)) %>%
group_by(dlpCleanSegment) %>% summarise(prob_duplicate = sum(is_duplicate)/n()) %>%
plot_ly(x = ~dlpCleanSegment, y = ~prob_duplicate, type = "bar")
df$wcCharQ1 <- stringr::str_count(df$q1Clean, pattern = "")
df$wcCharQ2 <- stringr::str_count(df$q2Clean, pattern = "")
df$dlcClean <- abs(df$wcCharQ1-df$wcCharQ2)
boxplot(dlcClean ~ is_duplicate, data = df, ylim = c(0,10))
boxplot(dlcClean ~ is_duplicate, data = df)
wilcox.test(dlcClean ~ is_duplicate, data = df)
df %>% mutate(dlcCleanSegment = cut(dlcClean, breaks = c(0,1,2,3,4,5,6,7,8,9,10,20,50,100,300), right = F)) %>%
group_by(dlpCleandlcCleanSegmentSegment) %>% summarise(prob_duplicate = sum(is_duplicate)/n()) %>%
plot_ly(x = ~dlcCleanSegment, y = ~prob_duplicate, type = "bar")
df %>% mutate(dlcCleanSegment = cut(dlcClean, breaks = c(0,1,2,3,4,5,6,7,8,9,10,20,50,100,300), right = F)) %>%
group_by(dlcCleanSegment) %>% summarise(prob_duplicate = sum(is_duplicate)/n()) %>%
plot_ly(x = ~dlcCleanSegment, y = ~prob_duplicate, type = "bar")
df %>% mutate(dlcCleanSegment = cut(dlcClean, breaks = c(0,2,4,6,8,10,20,50,100,300,1000,5000), right = F)) %>%
group_by(dlcCleanSegment) %>% summarise(prob_duplicate = sum(is_duplicate)/n()) %>%
plot_ly(x = ~dlcCleanSegment, y = ~prob_duplicate, type = "bar")
df %>% filter(is_duplicate == T) %>% count
df %>% filter(is_duplicate == T) %>% count(diffLp)
df %>% filter(is_duplicate == F) %>% count(diffLp)
df %>% filter(is_duplicate == T) %>% count(diffLp)
df %>% filter(is_duplicate == T) %>% group_by(n) %>% summarise(sum(n)/n())
df %>% filter(is_duplicate == T) %>% group_by(n)
df %>% filter(is_duplicate == T) %>% mutate(perc = n/sum(n))
df %>% filter(is_duplicate == T) %>% count(diffLp) %>% mutate(perc = n/sum(n))
df %>% filter(is_duplicate == T) %>% count(diffLp) %>% mutate(perc = n/sum(n) * 100)
df %>% filter(is_duplicate == F) %>% count(diffLp) %>% mutate(perc = n/sum(n) * 100)
df %>% mutate(diffLpSegment = cut(diffLp, breaks = c(0,1,2,3,4,5,6,7,8,9,10,20,50,100,300), right = F)) %>%
filter(diffLpSegment == "[1,2)") %>% count(diffLp)
df %>% group_by(is_duplicate) %>%
summarise(meanWCdiff = mean(diffLp), sdWCdiff = sd(diffLp), medianWCdiff = median(diffLp))
df %>% mutate(diffLpSegment = cut(diffLp, breaks = c(0,1,2,3,4,5,6,7,8,9,10,20,50,100,300), right = F)) %>%
group_by(diffLpSegment) %>% summarise(prob_duplicate = sum(is_duplicate)/n()) %>%
plot_ly(x = ~diffLpSegment, y = ~prob_duplicate, type = "bar")
df %>% mutate(diffLpSegment = cut(diffLp, breaks = c(0,1,2,3,4,5,6,7,8,9,10,20,50,100,300), right = F)) %>%
filter(diffLpSegment == "[1,2)") %>% count(diffLp)
df %>% filter(is_duplicate == T) %>% count(diffLp) %>% mutate(perc = n/sum(n) * 100)
df %>% filter(is_duplicate == F) %>% count(diffLp) %>% mutate(perc = n/sum(n) * 100)
df$wcQ1clean <- stringr::str_count(df$q1Clean, pattern = "\\S+")
df$wcQ2clean <- stringr::str_count(df$q2Clean, pattern = "\\S+")
df$dlpClean <- abs(df$wcQ1clean-df$wcQ2clean)
boxplot(dlpClean ~ is_duplicate, data = df, ylim = c(0,10))
wilcox.test(dlpClean ~ is_duplicate, data = df)
df %>% mutate(dlpCleanSegment = cut(dlpClean, breaks = c(0,1,2,3,4,5,6,7,8,9,10,20,50,100,300), right = F)) %>%
group_by(dlpCleanSegment) %>% summarise(prob_duplicate = sum(is_duplicate)/n()) %>%
plot_ly(x = ~dlpCleanSegment, y = ~prob_duplicate, type = "bar")
df %>% group_by(is_duplicate) %>%
summarise(meanWCdiff = mean(diffLp), sdWCdiff = sd(diffLp), medianWCdiff = median(diffLp))
df %>% mutate(diffLpSegment = cut(diffLp, breaks = c(0,1,2,3,4,5,6,7,8,9,10,20,50,100,300), right = F)) %>%
group_by(diffLpSegment) %>% summarise(prob_duplicate = sum(is_duplicate)/n()) %>%
plot_ly(x = ~diffLpSegment, y = ~prob_duplicate, type = "bar")
df %>% mutate(diffLpSegment = cut(diffLp, breaks = c(0,1,2,3,4,5,6,7,8,9,10,20,50,100,300), right = F)) %>%
filter(diffLpSegment == "[1,2)") %>% count(diffLp)
df %>% filter(is_duplicate == T) %>% count(diffLp) %>% mutate(perc = n/sum(n) * 100)
df %>% filter(is_duplicate == T) %>% count(diffLp) %>% mutate(perc = n/sum(n) * 100)
df %>% filter(is_duplicate == F) %>% count(diffLp) %>% mutate(perc = n/sum(n) * 100)
df$wcQ1clean <- stringr::str_count(df$q1Clean, pattern = "\\S+")
df$wcQ2clean <- stringr::str_count(df$q2Clean, pattern = "\\S+")
df$dlpClean <- abs(df$wcQ1clean-df$wcQ2clean)
df[, c("q1Clean", "q2Clean") := list(cleanText(question1, removeExtraWords = tm::stopwords("en"), preservePunct = "all"),
cleanText(question2, removeExtraWords = tm::stopwords("en"), preservePunct = "all"))]
df$wordCountQ1 <- stringr::str_count(df$question1, pattern = "\\S+")
df$wordCountQ2 <- stringr::str_count(df$question2, pattern = "\\S+")
df$diffLp <- abs(df$wordCountQ1-df$wordCountQ2)
summary(df$diffLp)
hist(df$diffLp, breaks = 50)
hist(log(df$diffLp), breaks = 50)
hist(log(df$diffLp), breaks = 50, col = "salmon")
hist(df$diffLp, breaks = 50, col = "salmon")
boxplot(diffLp ~ is_duplicate, data = df, ylim = c(0,10))
boxplot(diffLp ~ is_duplicate, data = df, col = c("salmon", "dodgerblue3"))
df[, c("q1Clean", "q2Clean") := list(cleanText(question1, removeExtraWords = tm::stopwords("en"), preservePunct = "all", removeNum = F),
cleanText(question2, removeExtraWords = tm::stopwords("en"), preservePunct = "all", removeNum = F))]
setwd("~/Kaggle/PNLP")
library(dplyr)
library(data.table)
library(plotly)
library(tidyr)
source("helper_pnlp.R")
Sys.setlocale(locale="es_ES.UTF-8") # Para visualizar caracteres especiales
# Leyendo datos y limpiando
df <- singleRead("data/train.csv")
head(df, 10)
glimpse(df)
df$filename <- NULL
df[, c("q1Clean", "q2Clean") := list(cleanText(question1, removeExtraWords = tm::stopwords("en"), preservePunct = "all", removeNum = F),
cleanText(question2, removeExtraWords = tm::stopwords("en"), preservePunct = "all", removeNum = F))]
df$is_duplicate <- as.logical(as.numeric(df$is_duplicate))
test <- "Hola que tal"
stringr::str_count(test, pattern = "\\S+")
test <- "Hola que tal,hola"
stringr::str_count(test, pattern = "\\S+")
stringr::str_count(test, pattern = "\\S+|,")
stringr::str_count(test, pattern = "\\S+|[,]")
stringr::str_count(test, pattern = "\\S+|[\\,]")
stringr::str_count(test, pattern = "\\S+|\\,")
stringr::str_count(test, pattern = "\\S+|\\,+")
stringr::str_count(test, pattern = "\\S+|,+")
stringr::str_count(test, pattern = "\\S+|[,]+")
stringr::str_count(test, pattern = "\\S+|[\\,]+")
df$wordCountQ1 <- stringr::str_count(df$question1, pattern = "\\S+")
df$wordCountQ2 <- stringr::str_count(df$question2, pattern = "\\S+")
df$diffLp <- abs(df$wordCountQ1-df$wordCountQ2)
df$diffLp <- abs(df$wordCountQ1-df$wordCountQ2)
summary(df$diffLp)
hist(df$diffLp, breaks = 50, col = "salmon")
boxplot(diffLp ~ is_duplicate, data = df, col = c("salmon", "dodgerblue3"))
15.73*2 + 68.27
15.73*2 + 68.27 - 100
(15.73*2 + 68.27 - 100 )/2
hist(df$diffLp, breaks = 50, col = "salmon")
wilcox.test(diffLp ~ is_duplicate, data = df )
df %>% group_by(is_duplicate) %>% # Resumen estadistico
summarise(meanWCdiff = mean(diffLp), sdWCdiff = sd(diffLp), medianWCdiff = median(diffLp))
var.test(diffLp ~ is_duplicate, data = df)
df %>% mutate(diffLpSegment = cut(diffLp, breaks = c(0,1,2,3,4,5,6,7,8,9,10,20,50,100,300), right = F)) %>%
group_by(diffLpSegment) %>% summarise(prob_duplicate = sum(is_duplicate)/n()) %>%
plot_ly(x = ~diffLpSegment, y = ~prob_duplicate, type = "bar")
quantile(df$diffLp)
q4 <- quantile(df$diffLp)
q4 + 1.5*(IQR(df$diffLp))
1.5*(IQR(df$diffLp))
q4
q4 <- quantile(df$diffLp)[4]
q4
q4 + 1.5*(IQR(df$diffLp))
df %>% group_by(is_duplicate) %>% summarise(quantile(df$diffLp)[4]+1.5*IQR(df$diffLp))
df %>% group_by(is_duplicate) %>% summarise(quantile(diffLp)[4]+1.5*IQR(diffLp))
df %>% mutate(diffLpSegment = cut(diffLp, breaks = c(0,6,10,20,50,100,300), right = F)) %>%
group_by(diffLpSegment) %>% summarise(prob_duplicate = sum(is_duplicate)/n()) %>%
plot_ly(x = ~diffLpSegment, y = ~prob_duplicate, type = "bar")
df %>% mutate(diffLpSegment = cut(diffLp, breaks = c(0,7,10,20,50,100,300), right = F)) %>%
group_by(diffLpSegment) %>% summarise(prob_duplicate = sum(is_duplicate)/n()) %>%
plot_ly(x = ~diffLpSegment, y = ~prob_duplicate, type = "bar")
df$wcQ1clean <- stringr::str_count(df$q1Clean, pattern = "\\S+")
df$wcQ2clean <- stringr::str_count(df$q2Clean, pattern = "\\S+")
df$dlpClean <- abs(df$wcQ1clean-df$wcQ2clean)
boxplot(dlpClean ~ is_duplicate, data = df, ylim = c(0,10))
wilcox.test(dlpClean ~ is_duplicate, data = df)
df %>% mutate(dlpCleanSegment = cut(dlpClean, breaks = c(0,1,2,3,4,5,6,7,8,9,10,20,50,100,300), right = F)) %>%
group_by(dlpCleanSegment) %>% summarise(prob_duplicate = sum(is_duplicate)/n()) %>%
plot_ly(x = ~dlpCleanSegment, y = ~prob_duplicate, type = "bar")
df$wordCountCharQ1 <- stringr::str_count(df$question1, pattern = "")
df$wordCountCharQ2 <- stringr::str_count(df$question2, pattern = "")
df$diffLc <- abs(df$wordCountCharQ1-df$wordCountCharQ2)
test
stringr::str_count(test, pattern = "")
nchar(test)
df$wordCountCharQ1 <- stringr::str_count(df$question1, pattern = "")
df$wordCountCharQ2 <- stringr::str_count(df$question2, pattern = "")
df$diffLc <- abs(df$wordCountCharQ1-df$wordCountCharQ2)
summary(df$diffLc)
hist(df$diffLc, breaks = 50)
df %>% group_by(is_duplicate) %>%
summarise(meanWCdiff = mean(diffLc), sdWCdiff = sd(diffLc), medianWCdiff = median(diffLc))
df %>% mutate(diffLcSegment = cut(diffLc, breaks = c(0,2,4,6,8,10,20,50,100,300,1000,5000), right = F)) %>%
group_by(diffLcSegment) %>% summarise(prob_duplicate = sum(is_duplicate)/n()) %>%
plot_ly(x = ~diffLcSegment, y = ~prob_duplicate, type = "bar")
df %>% mutate(diffLcSegment = cut(diffLc, breaks = c(0,8,20,50,100,300,1000,5000), right = F)) %>%
group_by(diffLcSegment) %>% summarise(prob_duplicate = sum(is_duplicate)/n()) %>%
plot_ly(x = ~diffLcSegment, y = ~prob_duplicate, type = "bar")
df %>% mutate(diffLcSegment = cut(diffLc, breaks = c(0,9,15,50,100,300,1000,5000), right = F)) %>%
group_by(diffLcSegment) %>% summarise(prob_duplicate = sum(is_duplicate)/n()) %>%
plot_ly(x = ~diffLcSegment, y = ~prob_duplicate, type = "bar")
df %>% mutate(diffLcSegment = cut(diffLc, breaks = c(0,21,50,100,300,1000,5000), right = F)) %>%
group_by(diffLcSegment) %>% summarise(prob_duplicate = sum(is_duplicate)/n()) %>%
plot_ly(x = ~diffLcSegment, y = ~prob_duplicate, type = "bar")
df %>% mutate(diffLcSegment = cut(diffLc, breaks = c(0,51,100,300,1000,5000), right = F)) %>%
group_by(diffLcSegment) %>% summarise(prob_duplicate = sum(is_duplicate)/n()) %>%
plot_ly(x = ~diffLcSegment, y = ~prob_duplicate, type = "bar")
df$wcCharQ1 <- stringr::str_count(df$q1Clean, pattern = "")
df$wcCharQ2 <- stringr::str_count(df$q2Clean, pattern = "")
df$dlcClean <- abs(df$wcCharQ1-df$wcCharQ2)
boxplot(dlcClean ~ is_duplicate, data = df)
wilcox.test(dlcClean ~ is_duplicate, data = df)
df %>% mutate(dlcCleanSegment = cut(dlcClean, breaks = c(0,2,4,6,8,10,20,50,100,300,1000,5000), right = F)) %>%
group_by(dlcCleanSegment) %>% summarise(prob_duplicate = sum(is_duplicate)/n()) %>%
plot_ly(x = ~dlcCleanSegment, y = ~prob_duplicate, type = "bar")
df %>% mutate(dlcCleanSegment = cut(dlcClean, breaks = c(0,51,100,300,1000,5000), right = F)) %>%
group_by(dlcCleanSegment) %>% summarise(prob_duplicate = sum(is_duplicate)/n()) %>%
plot_ly(x = ~dlcCleanSegment, y = ~prob_duplicate, type = "bar")
mod1 <- glm(is_duplicate ~ dlcClean, data = df)
summary(mod1)
mod1
summary(mod1)
head(df$is_duplicate)
head(df$dlcClean)
LogLossBinary = function(actual, predicted, eps = 1e-15) {
predicted = pmin(pmax(predicted, eps), 1-eps)
- (sum(actual * log(predicted) + (1 - actual) * log(1 - predicted))) / length(actual)
}
pred <- predict(mod1)
pred
LogLossBinary(df$is_duplicate, pred)
df$modBasico <- 0.9999999999999
sum(df$is_duplicate)/nrow(df)
df$modBasico <- sum(df$is_duplicate)/nrow(df)
LogLossBinary(df$is_duplicate, df$modBasico)
LogLossBinary(df$is_duplicate, pred)
summary(mod1)
